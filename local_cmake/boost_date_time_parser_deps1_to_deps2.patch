--- a/boost/date_time/time_facet.hpp	2015-04-28 21:49:02.000000000 -0700
+++ b/boost/date_time/time_facet.hpp	2015-06-03 15:48:15.508451570 -0700
@@ -972,6 +972,7 @@
         // time elements
         hour_type hour = 0;
         hour_type base_hour = 0; // used for AM/PM
+        bool has_am_pm = false; 
         min_type min = 0;
         sec_type sec = 0;
         typename time_duration_type::fractional_seconds_type frac(0);
@@ -1143,9 +1144,11 @@
                     if (c[0] == 'P' && c[1] == 'M') {
                       // PM
                       base_hour = 12;
+                      has_am_pm = true;
                     } else if (c[0] == 'A'&&  c[1] == 'M') {
                       // AM
                       base_hour = 0;
+                      has_am_pm = true;
                     } else {
                       boost::throw_exception(
                           std::ios_base::failure("Parse failed. Invalid expression for %P"));
@@ -1166,9 +1169,11 @@
                     if (c[0] == 'p' && c[1] == 'm') {
                       // PM
                       base_hour = 12;
+                      has_am_pm = true;
                     } else if (c[0] == 'a' && c[1] == 'm') {
                       // AM
                       base_hour = 0;
+                      has_am_pm = true;
                     } else {
                       boost::throw_exception(
                           std::ios_base::failure("Parse failed. Invalid expression for %P"));
@@ -1292,6 +1297,10 @@
         else {
           d = date_type(t_year, t_month, t_day);
         }
+        // handle the case where 12:15am really means 0015
+        // and 12:15pm really means 12:15 
+        // Also 12pm is noon, 12am is midnight
+        if (hour == 12 && has_am_pm) hour = 0;
         hour += base_hour;
         if (hour > 24 && min > 0) {
           boost::throw_exception(
